name: tests

on: [push]

jobs:
  test:
    name: Rust ${{ matrix.rust_version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        rust_version: [stable, beta, nightly]
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
    - uses: actions/checkout@v1
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust_version }}
        override: true
    - name: cargo test --features=c
      run: cargo test --features=c
    - name: cargo test --no-default-features
      run: cargo test --no-default-features
    - name: binary tests
      working-directory: ./baokeshed_bin
      run: cargo test

  cross:
    name: cross test on mips
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    - name: install cross
      run: cargo install cross
    - name: cross test
      run: cross test --target mips-unknown-linux-gnu --features=c

  test_c:
    name: C implementation on Linux
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    - name: cpuinfo
      run: cat /proc/cpuinfo

    # We want to see C compiler flags in the build output, which requires
    # building at high verbosity. To avoid seeing a flood of output, do an
    # initial build at low verbosity. All x86 SIMD features should build
    # successfully, including AVX512, even though the host currently doesn't
    # support running AVX512.
    - name: pre-build tests
      run: cargo build --tests --features=c_avx512
    - name: pre-build tests --release
      run: cargo build --tests --features=c_avx512 --release

    - name: test portable
      run: cargo test -vv --features=c
    - name: test SSE4.1
      run: cargo test -vv --features=c_sse41
    - name: test AVX2
      run: cargo test -vv --features=c_avx2
    # The GitHub Actions test machines don't support AVX512 yet. The Rust tests
    # do runtime feature detection, but the C code does not.
    # - name: test AVX512
    #   run: cargo test -vv --features=c_avx512

    # The rerun-if-env-changed directives in build.rs mean that each of these
    # different CC settings will do a recompilation.
    - name: test native GCC
      env:
        CC: gcc
      run: cargo test -vv --features=c_native --release
    - name: test native Clang
      env:
        CC: clang
      run: cargo test -vv --features=c_native --release
